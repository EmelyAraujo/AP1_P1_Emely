@page "/aporte"
@page "/aportes/{AporteId:int}"

@inject AportesBLL aportesBLL
@inject NotificationService notificationService



<EditForm Model="aporte" OnValidSubmit="Guardar">
    <link rel="stylesheet" href="https: //cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Aportes</h3>
        </div>
        <div class="card-body">
            <div class="container overflow-hidden">
                    <div class="row gy-6">
                        <label>Aporte ID</label>
                        <div class="form-row align-items-center">
                            <div class="col-3">
                                <div class="mb-3">
                                    <div class="input-group">
                                        <InputNumber @bind-Value="aporte.AporteId" class="form-control" />
                                        <div class="input-group-append mx-3">
                                            <button type="button" class=" btn btn-primary input-group-text"
                                                @onclick="Buscar"><i class="oi oi-magnifying-glass" /></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-3">
                            <label> Fecha</label>
                            <div class="mb-3">
                                <InputDate @bind-Value="aporte.fecha" class="form-control" />
                                <ValidationMessage For="@(() => aporte.fecha)" />
                            </div>
                        </div>
                    </div>

                <div class="col-6">
                    <div class="mb-3">
                        <label>Persona</label>
                        <InputText @bind-Value="aporte.Persona" class="form-control" />
                        <ValidationMessage For="@(() => aporte.Persona)" />
                    </div>
                </div>

                <div class="col-6">
                    <div class="mb-3">
                        <label>Observacion</label>
                        <InputText @bind-Value="aporte.Observacion" class="form-control" />
                        <ValidationMessage For="@(() => aporte.Observacion)" />
                    </div>
                </div>
                <div class="col-2">
                    <div class="mb-3">
                        <label>Monto</label>
                        <InputNumber @bind-Value="aporte.Monto" class="form-control" />
                        <ValidationMessage For="@(() => aporte.Monto)" />
                    </div>
                </div>
            </div>
        </div>
        <h1>
            <span class="text-danger">@mensaje</span>
        </h1>

    </div>
    <div class="card-footer">
        <div class="form-group text-center" display: inline-block>
            <button type="button" class="btn btn-lg btn-primary"> <i class="oi oi-file" /> Nuevo</button>
            <button type="submit" class="btn btn-lg btn-success"><i class="oi oi-document" /> Guardar</button>
            <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />
                Eliminar</button>
        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int AporteId { get; set; }
    public Aportes aporte { get; set; } = new Aportes();

    public String mensaje { get; set; } = "";

    public void Nuevo()
    {
        aporte = new Aportes();
    }
    bool Validar()
    {
        return aporte.Observacion.Contains(".");
    }

    protected override void OnInitialized()
    {
        if (AporteId > 0)
        {
            //si recibimos una {OcupacionId:int} por parametro asignarla
            // y luego buscarla para que se vea en pantalla
            this.aporte.AporteId = AporteId;
            this.Buscar();
        }
    }

    public void Guardar()
    {
        bool guardo;

        if (!Validar())
        {
            mensaje = "Hay errores, por favor corregir.";
            return;
        }

        guardo = aportesBLL.Guardar(this.aporte);

        if (guardo)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });

            Nuevo();

        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No se guardo correctamente."
            });

        }


    }
    private void Buscar()
    {
        if (aporte.AporteId > 0)
        {
            var encontrado = aportesBLL.Buscar(aporte.AporteId);

            if (encontrado != null)
                this.aporte = encontrado;
            else
            {
                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "No Encontrado..."
                });
            }

        }
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = aportesBLL.Eliminar(aporte);

        if (elimino)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Fue eliminado correctamente."
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue Eliminado, intentar nuevamente."
            });
        }
    }
    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}
